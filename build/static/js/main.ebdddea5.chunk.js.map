{"version":3,"sources":["components/CountDownComponent.js","App.js","serviceWorker.js","index.js"],"names":["moment","require","momentDurationFormatSetup","SVGCircle","_ref","radius","react_default","a","createElement","className","fill","stroke","strokeWidth","d","describeArc","CountDownComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timeTillDate","match","params","untilTimestamp","timeFormat","state","days","undefined","hours","minutes","seconds","_this2","interval","setInterval","then","parseInt","now","countdown","diff","timeLeft","duration","format","trim","split","setState","clearInterval","_this$state","daysRadius","mapNumber","hoursRadius","minutesRadius","secondsRadius","CountDownComponent_SVGCircle","Component","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","Math","PI","x","cos","y","sin","startAngle","endAngle","start","end","largeArcFlag","join","number","in_min","in_max","out_min","out_max","App","Fragment","react_router","path","component","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebdddea5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nconst moment = require('moment');\r\nconst momentDurationFormatSetup = require('moment-duration-format');\r\nmomentDurationFormatSetup(moment);\r\n\r\nconst SVGCircle = ({radius}) => (\r\n  <svg className=\"countdown-svg\">\r\n    <path fill=\"none\" stroke=\"#333\" strokeWidth=\"4\" d={describeArc(50, 50, 48, 0, radius)} />\r\n  </svg>\r\n);\r\n\r\nclass CountDownComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.timeTillDate = props.match.params.untilTimestamp ? props.match.params.untilTimestamp : moment();\r\n    this.timeFormat = 'MM DD YYYY, h:mm a';\r\n    this.state = {\r\n      days: undefined,\r\n      hours: undefined,\r\n      minutes: undefined,\r\n      seconds: undefined,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => {\r\n      const then = moment(parseInt(this.timeTillDate));\r\n      const now = moment();\r\n      const countdown = then.diff(now);\r\n      const timeLeft = moment\r\n        .duration(countdown, 'milliseconds')\r\n        .format('d[d]h:mm:ss', {trim: false})\r\n        .split('d');\r\n      const days = timeLeft[0];\r\n      const hours = timeLeft[1].split(':')[0];\r\n      const minutes = timeLeft[1].split(':')[1];\r\n      const seconds = timeLeft[1].split(':')[2];\r\n\r\n      this.setState({days, hours, minutes, seconds});\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.interval) {\r\n      clearInterval(this.interval);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {days, hours, minutes, seconds} = this.state;\r\n    const daysRadius = mapNumber(days, 0, 366, 0, 360);\r\n    const hoursRadius = mapNumber(hours, 0, 24, 0, 360);\r\n    const minutesRadius = mapNumber(minutes, 0, 60, 0, 360);\r\n    const secondsRadius = mapNumber(seconds, 0, 60, 0, 360);\r\n\r\n    if (!seconds) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>Countdown until {moment(parseInt(this.timeTillDate)).format(this.timeFormat)}</h1>\r\n        <div className=\"countdown-wrapper\">\r\n          {days && (\r\n            <div className=\"countdown-item\">\r\n              <SVGCircle radius={daysRadius} />\r\n              {days}\r\n              <span>days</span>\r\n            </div>\r\n          )}\r\n          {hours && (\r\n            <div className=\"countdown-item\">\r\n              <SVGCircle radius={hoursRadius} />\r\n              {hours}\r\n              <span>hours</span>\r\n            </div>\r\n          )}\r\n          {minutes && (\r\n            <div className=\"countdown-item\">\r\n              <SVGCircle radius={minutesRadius} />\r\n              {minutes}\r\n              <span>minutes</span>\r\n            </div>\r\n          )}\r\n          {seconds && (\r\n            <div className=\"countdown-item\">\r\n              <SVGCircle radius={secondsRadius} />\r\n              {seconds}\r\n              <span>seconds</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From stackoverflow: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\r\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\r\n  var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0;\r\n\r\n  return {\r\n    x: centerX + radius * Math.cos(angleInRadians),\r\n    y: centerY + radius * Math.sin(angleInRadians),\r\n  };\r\n};\r\n\r\nconst describeArc = (x, y, radius, startAngle, endAngle) => {\r\n  var start = polarToCartesian(x, y, radius, endAngle);\r\n  var end = polarToCartesian(x, y, radius, startAngle);\r\n\r\n  var largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n\r\n  var d = ['M', start.x, start.y, 'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(' ');\r\n\r\n  return d;\r\n};\r\n\r\n// Stackoverflow: https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\r\nconst mapNumber = (number, in_min, in_max, out_min, out_max) => {\r\n  return ((number - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min;\r\n};\r\n\r\nexport default CountDownComponent;\r\n","import React, {Component} from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport CountDownComponent from './components/CountDownComponent'\nimport './styles/app.css'; \n\nclass App extends Component {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <Switch>\n            <Route path=\"/:untilTimestamp\" component={CountDownComponent} />\n          </Switch>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'; //don't need to specify localhost\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}